<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>changed</key>
	<dict>
		<key>repository.comments.patterns</key>
		<array>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.swift</string>
					</dict>
				</dict>
				<key>match</key>
				<string>\A^(#!).*$\n?</string>
				<key>name</key>
				<string>comment.line.number-sign.swift</string>
			</dict>
			<dict>
				<key>begin</key>
				<string>/\*\*(?!/)</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.begin.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>\*/</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.end.swift</string>
					</dict>
				</dict>
				<key>name</key>
				<string>comment.block.documentation.swift</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#nested</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>begin</key>
				<string>/\*:</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.begin.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>\*/</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.end.swift</string>
					</dict>
				</dict>
				<key>name</key>
				<string>comment.block.documentation.playground.swift</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#nested</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>begin</key>
				<string>/\*</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.begin.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>\*/</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.comment.end.swift</string>
					</dict>
				</dict>
				<key>name</key>
				<string>comment.block.swift</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#nested</string>
					</dict>
				</array>
			</dict>
			<dict>
				<key>match</key>
				<string>\*/</string>
				<key>name</key>
				<string>invalid.illegal.unexpected-end-of-block-comment.swift</string>
			</dict>
			<dict>
				<key>begin</key>
				<string>(^[ \t]+)?(?=//)</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>punctuation.whitespace.comment.leading.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>(?!\G)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>///</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.swift</string>
							</dict>
						</dict>
						<key>end</key>
						<string>^</string>
						<key>name</key>
						<string>comment.line.triple-slash.documentation.swift</string>
					</dict>
					<dict>
						<key>begin</key>
						<string>//:</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.swift</string>
							</dict>
						</dict>
						<key>end</key>
						<string>^</string>
						<key>name</key>
						<string>comment.line.double-slash.documentation.swift</string>
					</dict>
					<dict>
						<key>begin</key>
						<string>(//) ?(MARK|TODO|FIXME): ?(-)?</string>
						<key>beginCaptures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.swift</string>
							</dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.kind.swift</string>
							</dict>
							<key>3</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.hrule.swift</string>
							</dict>
						</dict>
						<key>end</key>
						<string>^</string>
						<key>name</key>
						<string>comment.line.double-slash.${2:/downcase}.swift</string>
					</dict>
					<dict>
						<key>begin</key>
						<string>//</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.swift</string>
							</dict>
						</dict>
						<key>end</key>
						<string>^</string>
						<key>name</key>
						<string>comment.line.double-slash.swift</string>
					</dict>
				</array>
			</dict>
		</array>
		<key>repository.declarations.repository.extension.patterns</key>
		<array>
			<dict>
				<key>include</key>
				<string>#comments</string>
			</dict>
			<dict>
				<key>comment</key>
				<string>SE-0143: Conditional Conformances</string>
				<key>include</key>
				<string>#generic-where-clause</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#inheritance-clause</string>
			</dict>
			<dict>
				<key>begin</key>
				<string>\{</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.type.begin.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>\}</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.type.end.swift</string>
					</dict>
				</dict>
				<key>name</key>
				<string>meta.definition.type.body.swift</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#property</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#property-constant</string>
					</dict>
					<dict>
						<key>include</key>
						<string>$self</string>
					</dict>
				</array>
			</dict>
		</array>
		<key>repository.declarations.repository.function-body</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.definition.function.body.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>repository.declarations.repository.function-initializer.end</key>
		<string>(?&lt;=\}|\G$)</string>
		<key>repository.declarations.repository.function-initializer.patterns</key>
		<array>
			<dict>
				<key>include</key>
				<string>#comments</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#generic-parameter-clause</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#parameter-clause</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(?:throws|rethrows)\b</string>
				<key>name</key>
				<string>keyword.control.exception.swift</string>
			</dict>
			<dict>
				<key>comment</key>
				<string>Swift 3: generic constraints after the parameters and return type</string>
				<key>include</key>
				<string>#generic-where-clause</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#function-body</string>
			</dict>
		</array>
		<key>repository.declarations.repository.function-test</key>
		<dict>
			<key>begin</key>
			<string>(?x)
						\b
						(func)
						\s+
						(
							test[\p{L}_\p{N}\p{M}]*
						)
						\s*
						(?=\(|&lt;)
					</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.test.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.identifier.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\}|\G$)(?# functions in protocol declarations or generated interfaces have no body)</string>
			<key>name</key>
			<string>meta.definition.function.test.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic-parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-result</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:throws|rethrows)\b</string>
					<key>name</key>
					<string>keyword.control.exception.swift</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Swift 3: generic constraints after the parameters and return type</string>
					<key>include</key>
					<string>#generic-where-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-test-body</string>
				</dict>
			</array>
		</dict>
		<key>repository.declarations.repository.function-test-body</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>meta.definition.function.test.body.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>repository.declarations.repository.function.begin</key>
		<string>(?x)
                        \b
                        (func)
                        \s+
                        (   
                            (?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)
                          | (?:
                                (
                                    (?&lt;oph&gt;                                # operator-head
                                        [/=\-+!*%&lt;&gt;&amp;|^~?]
                                      | [\x{00A1}-\x{00A7}]
                                      | [\x{00A9}\x{00AB}]
                                      | [\x{00AC}\x{00AE}]
                                      | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
                                      | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
                                      | [\x{2030}-\x{203E}]
                                      | [\x{2041}-\x{2053}]
                                      | [\x{2055}-\x{205E}]
                                      | [\x{2190}-\x{23FF}]
                                      | [\x{2500}-\x{2775}]
                                      | [\x{2794}-\x{2BFF}]
                                      | [\x{2E00}-\x{2E7F}]
                                      | [\x{3001}-\x{3003}]
                                      | [\x{3008}-\x{3030}]
                                    )
                                    (
                                        \g&lt;oph&gt;
                                      | (?&lt;opc&gt;                                # operator-character
                                            [\x{0300}-\x{036F}]
                                          | [\x{1DC0}-\x{1DFF}]
                                          | [\x{20D0}-\x{20FF}]
                                          | [\x{FE00}-\x{FE0F}]
                                          | [\x{FE20}-\x{FE2F}]
                                          | [\x{E0100}-\x{E01EF}]
                                        )
                                    )*
                                )
                              | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )+ )            # Dot operators
                            )
                        )
                        \s*
                        (?=\(|&lt;)
                    </string>
		<key>repository.declarations.repository.function.end</key>
		<string>(?&lt;=\}|\G$)(?# functions in protocol declarations or generated interfaces have no body)</string>
		<key>repository.declarations.repository.function.patterns</key>
		<array>
			<dict>
				<key>include</key>
				<string>#comments</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#generic-parameter-clause</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#parameter-clause</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#function-result</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\b(?:throws|rethrows)\b</string>
				<key>name</key>
				<string>keyword.control.exception.swift</string>
			</dict>
			<dict>
				<key>comment</key>
				<string>Swift 3: generic constraints after the parameters and return type</string>
				<key>include</key>
				<string>#generic-where-clause</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#function-body</string>
			</dict>
		</array>
		<key>repository.declarations.repository.import.patterns</key>
		<array>
			<dict>
				<key>begin</key>
				<string>\G(?!;|$|//|/\*)(?:(typealias|struct|class|enum|protocol|var|func)\s+)?</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>storage.modifier.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>(?=;|$|//|/\*)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.identifier.swift</string>
							</dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.identifier.swift</string>
							</dict>
						</dict>
						<key>match</key>
						<string>(?x)
										(?&lt;=\G|\.)
										(?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;)
									</string>
						<key>name</key>
						<string>entity.name.module.swift</string>
					</dict>
					<dict>
						<key>match</key>
						<string>(?x)
										(?&lt;=\G|\.)
										\$[0-9]+
									</string>
						<key>name</key>
						<string>entity.name.type.swift</string>
					</dict>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>patterns</key>
								<array>
									<dict>
										<key>match</key>
										<string>\.</string>
										<key>name</key>
										<string>invalid.illegal.dot-not-allowed-here.swift</string>
									</dict>
								</array>
							</dict>
						</dict>
						<key>match</key>
						<string>(?x)
										(?&lt;=\G|\.)
										(?:
											(
												(?&lt;oph&gt;								# operator-head
													[/=\-+!*%&lt;&gt;&amp;|^~?]
												  | [\x{00A1}-\x{00A7}]
												  | [\x{00A9}\x{00AB}]
												  | [\x{00AC}\x{00AE}]
												  | [\x{00B0}-\x{00B1}\x{00B6}\x{00BB}\x{00BF}\x{00D7}\x{00F7}]
												  | [\x{2016}-\x{2017}\x{2020}-\x{2027}]
												  | [\x{2030}-\x{203E}]
												  | [\x{2041}-\x{2053}]
												  | [\x{2055}-\x{205E}]
												  | [\x{2190}-\x{23FF}]
												  | [\x{2500}-\x{2775}]
												  | [\x{2794}-\x{2BFF}]
												  | [\x{2E00}-\x{2E7F}]
												  | [\x{3001}-\x{3003}]
												  | [\x{3008}-\x{3030}]
												)
												(
													\g&lt;oph&gt;
												  | (?&lt;opc&gt;								# operator-character
														[\x{0300}-\x{036F}]
													  | [\x{1DC0}-\x{1DFF}]
													  | [\x{20D0}-\x{20FF}]
													  | [\x{FE00}-\x{FE0F}]
													  | [\x{FE20}-\x{FE2F}]
													  | [\x{E0100}-\x{E01EF}]
													)
												)*
											)
										  | ( \. ( \g&lt;oph&gt; | \g&lt;opc&gt; | \. )+ )			# Dot operators
										)
										(?=\.|;|$|//|/\*|\s)
									</string>
						<key>name</key>
						<string>entity.name.type.swift</string>
					</dict>
					<dict>
						<key>match</key>
						<string>\.</string>
						<key>name</key>
						<string>punctuation.separator.import.swift</string>
					</dict>
					<dict>
						<key>begin</key>
						<string>(?!;|$|//|/\*)</string>
						<key>end</key>
						<string>(?=;|$|//|/\*)</string>
						<key>name</key>
						<string>invalid.illegal.character-not-allowed-here.swift</string>
					</dict>
				</array>
			</dict>
		</array>
		<key>repository.declarations.repository.property</key>
		<dict>
			<key>begin</key>
			<string>(?x)
						\b(?:(static|class)\s+)?
						(var)\s+
						((?&lt;q1&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]+(\k&lt;q1&gt;))\s*
                        (?=(:|=))  (?# Must have at least one of type or initializer)
						(:\s*([^={]+)\s*)?
						(=((?=\s*\{)|\s*\S.*$|$))?
					</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.definition.property.header.swift</string>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.property.swift</string>
				</dict>
				<key>10</key>
				<dict>
					<key>name</key>
					<string>entity.other.property.initializer.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.property.swift</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.other.property.type.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#available-types</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>comment</key>
			<string>With line-by-line scanning there does not seem to be a way to distinguish computed properties from stored variable properties with bodies. Allman braces also can't be supported</string>
			<key>end</key>
			<string>(?&lt;=\}|\G$)</string>
			<key>name</key>
			<string>meta.definition.property.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#property-initializer-closure</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-body</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict>
		<key>repository.declarations.repository.property-body</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.property.begin.swift</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.property.end.swift</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.definition.property.body.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#property-body-forms</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#typealias</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expressions</string>
				</dict>
			</array>
		</dict>
		<key>repository.declarations.repository.property-body-forms</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#property-accessor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-observer</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>property-accessor</key>
				<dict>
					<key>begin</key>
					<string>(get|set)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.property.$1ter.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.property.accessor.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.property.accessor.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.definition.property.computed.$1ter.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<key>property-observer</key>
				<dict>
					<key>begin</key>
					<string>((did|will)Set)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.property.observer.${1:/downcase}.swift</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.property.observer.begin.swift</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.property.observer.end.swift</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.definition.property.observer.${1:/downcase}.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>repository.declarations.repository.property-constant</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.definition.property.header.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#property-initializer-closure</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#property-initializer-multiline-string</string>
						</dict>
					</array>
				</dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.property.swift</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.swift</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.property.swift</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.other.property.type.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#available-types</string>
						</dict>
					</array>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>entity.other.property.initializer.swift</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expressions</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
                        \b(?:(static|class)\s+)?
                        (let)\s+
                        ((?&lt;q1&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q1&gt;))\s*
                        (?=(:|=))  (?# Must have at least one of type or initializer)
                        (:\s*([\p{L}_\p{N}\p{M}\[\]&lt;&gt;\(\)?!.,:]+))?\s*
                        (=\s*((?=\{)|
                              (?=""")|
                              \S.*))?
                    </string>
			<key>name</key>
			<string>meta.definition.property.constant.swift</string>
		</dict>
		<key>repository.declarations.repository.property-initializer-closure</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;==)\G\s*\{</string>
			<key>comment</key>
			<string>Having a scope specifically for properties initialized by closures prevents variable declarations inside the closure from being parsed as properties themselves.</string>
			<key>end</key>
			<string>\}</string>
			<key>name</key>
			<string>entity.other.property.initializer.closure.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>repository.declarations.repository.property-initializer-multiline-string</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;==)\G\s*(?=""")</string>
			<key>comment</key>
			<string>Having a scope specifically for constant properties initialized by a multiline string is required since the constant property is expressed as a single-line match</string>
			<key>end</key>
			<string>(?&lt;=""")\G</string>
			<key>name</key>
			<string>entity.other.property.initializer.multiline-string.swift</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
			</array>
		</dict>
		<key>repository.declarations.repository.type-enum.patterns</key>
		<array>
			<dict>
				<key>include</key>
				<string>#comments</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#generic-parameter-clause</string>
			</dict>
			<dict>
				<key>comment</key>
				<string>Swift 3: generic constraints after the generic param list</string>
				<key>include</key>
				<string>#generic-where-clause</string>
			</dict>
			<dict>
				<key>include</key>
				<string>#inheritance-clause</string>
			</dict>
			<dict>
				<key>begin</key>
				<string>\{</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.type.begin.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>\}</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.type.end.swift</string>
					</dict>
				</dict>
				<key>name</key>
				<string>meta.definition.type.body.swift</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#enum-case-clause</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#property</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#property-constant</string>
					</dict>
					<dict>
						<key>include</key>
						<string>$self</string>
					</dict>
				</array>
			</dict>
		</array>
		<key>repository.declarations.repository.type.patterns</key>
		<array>
			<dict>
				<key>begin</key>
				<string>\b(class(?!\s+(?:func|var|let)\b))\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))(?:\s*:\s*\p{Upper}{2,}[\p{L}_\p{N}\p{M}]*TestCase)</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>storage.type.class.swift</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>entity.name.type.class.test.swift</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.identifier.swift</string>
					</dict>
					<key>4</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.identifier.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>(?&lt;=\})</string>
				<key>name</key>
				<string>meta.definition.type.class.test.swift</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#comments</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#generic-parameter-clause</string>
					</dict>
					<dict>
						<key>comment</key>
						<string>Swift 3: generic constraints after the generic param list</string>
						<key>include</key>
						<string>#generic-where-clause</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#inheritance-clause</string>
					</dict>
					<dict>
						<key>begin</key>
						<string>\{</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.type.begin.swift</string>
							</dict>
						</dict>
						<key>end</key>
						<string>\}</string>
						<key>endCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.type.end.swift</string>
							</dict>
						</dict>
						<key>name</key>
						<string>meta.definition.type.body.swift</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#function-test</string>
							</dict>
							<dict>
								<key>include</key>
								<string>$self</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
			<dict>
				<key>begin</key>
				<string>\b(class(?!\s+(?:func|var|let)\b)|struct)\s+((?&lt;q&gt;`?)[\p{L}_][\p{L}_\p{N}\p{M}]*(\k&lt;q&gt;))</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>storage.type.$1.swift</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>entity.name.type.$1.swift</string>
					</dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.identifier.swift</string>
					</dict>
					<key>4</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.identifier.swift</string>
					</dict>
				</dict>
				<key>end</key>
				<string>(?&lt;=\})</string>
				<key>name</key>
				<string>meta.definition.type.$1.swift</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#comments</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#generic-parameter-clause</string>
					</dict>
					<dict>
						<key>comment</key>
						<string>Swift 3: generic constraints after the generic param list</string>
						<key>include</key>
						<string>#generic-where-clause</string>
					</dict>
					<dict>
						<key>include</key>
						<string>#inheritance-clause</string>
					</dict>
					<dict>
						<key>begin</key>
						<string>\{</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.type.begin.swift</string>
							</dict>
						</dict>
						<key>end</key>
						<string>\}</string>
						<key>endCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.type.end.swift</string>
							</dict>
						</dict>
						<key>name</key>
						<string>meta.definition.type.body.swift</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#property</string>
							</dict>
							<dict>
								<key>include</key>
								<string>#property-constant</string>
							</dict>
							<dict>
								<key>include</key>
								<string>$self</string>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
			<dict>
				<key>include</key>
				<string>#type-enum</string>
			</dict>
		</array>
		<key>repository.keywords.patterns</key>
		<array>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(?:if|else|guard|where|switch|case|default|fallthrough)\b</string>
				<key>name</key>
				<string>keyword.control.branch.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(?:continue|break|fallthrough|return)\b</string>
				<key>name</key>
				<string>keyword.control.transfer.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(?:while|for|in)\b</string>
				<key>name</key>
				<string>keyword.control.loop.swift</string>
			</dict>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.loop.swift</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>punctuation.whitespace.trailing.repeat.swift</string>
					</dict>
				</dict>
				<key>comment</key>
				<string>extra scopes for repeat-while snippet</string>
				<key>match</key>
				<string>(?&lt;!\.)\b(repeat)\b(\s*)</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\bdefer\b</string>
				<key>name</key>
				<string>keyword.control.defer.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(?:catch|throws?|rethrows|try)\b|\btry[?!]\B</string>
				<key>name</key>
				<string>keyword.control.exception.swift</string>
			</dict>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.exception.swift</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>punctuation.whitespace.trailing.do.swift</string>
					</dict>
				</dict>
				<key>comment</key>
				<string>extra scopes for do-catch snippet</string>
				<key>match</key>
				<string>(?&lt;!\.)\b(do)\b(\s*)</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(?:associatedtype|let|operator|typealias|var)\b</string>
				<key>name</key>
				<string>keyword.other.declaration-specifier.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(class|enum|extension|precedencegroup|protocol|struct)\b</string>
				<key>name</key>
				<string>storage.type.$1.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(?:inout|static|final|lazy|mutating|nonmutating|optional|indirect|required|override|dynamic|convenience|infix|prefix|postfix)\b</string>
				<key>name</key>
				<string>storage.modifier.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\binit[?!]|\binit\b|(?&lt;!\.)\b(?:func|deinit|subscript|didSet|get|set|willSet)\b</string>
				<key>name</key>
				<string>storage.type.function.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(?:fileprivate|private|internal|public|open)\b</string>
				<key>name</key>
				<string>keyword.other.declaration-specifier.accessibility.swift</string>
			</dict>
			<dict>
				<key>comment</key>
				<string>matches weak, unowned, unowned(safe), unowned(unsafe)</string>
				<key>match</key>
				<string>(?&lt;!\.)\b(?:weak|unowned)\b|\bunowned\((?:safe|unsafe)\)</string>
				<key>name</key>
				<string>keyword.other.capture-specifier.swift</string>
			</dict>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.operator.type.swift</string>
					</dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.operator.type.metatype.swift</string>
					</dict>
				</dict>
				<key>match</key>
				<string>(?&lt;=\.)(?:(dynamicType|self)|(Protocol|Type))\b</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\b(super|self|Self)\b</string>
				<key>name</key>
				<string>variable.language.$1.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>\B(?:#file|#line|#column|#function|#dsohandle)\b|\b(?:__FILE__|__LINE__|__COLUMN__|__FUNCTION__|__DSO_HANDLE__)\b</string>
				<key>name</key>
				<string>support.variable.swift</string>
			</dict>
			<dict>
				<key>match</key>
				<string>(?&lt;!\.)\bimport\b</string>
				<key>name</key>
				<string>keyword.control.import.swift</string>
			</dict>
		</array>
	</dict>
	<key>isDelta</key>
	<true/>
	<key>uuid</key>
	<string>8C743E89-9C8D-4833-8149-6500D82AA463</string>
</dict>
</plist>
